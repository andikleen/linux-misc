#
# Support for gcc link time optimization
#

DISABLE_LTO :=
LTO_CFLAGS :=

export DISABLE_LTO
export LTO_CFLAGS

ifdef CONFIG_LTO

# We keep these checks here and not in Kconfig to give better error messages
#
# Some ar versions need a lot of file descriptors when using the LTO
# plugin and cause strange errors when it is too low.
# XXX determine better threshold
# XXX narrow down versions
ifeq ($(shell if ar --version | grep -q 2\.31 ; then echo bad ; fi),bad)
ifeq ($(shell if test `ulimit -n` -lt 4000 ; then echo yes ; fi),yes)
        $(warning Disabling LTO. File descriptor limit too low for ar version.)
        $(warning Increase with ulimit -n 4000 as root or upgrade binutils)
        undefine CONFIG_LTO
endif
endif

# binutils before 2.27 has various problems with plugins
ifeq ($(call ld-ifversion,-lt,227000000,y),y)
        $(warning Disabling LTO. Too old binutils (< 2.27))
endif

endif # CONFIG_LTO

ifdef CONFIG_LTO
	LTO_CFLAGS := -flto

	# gcc 8.x doesn't generate debuginfo if we don't
	# specify -g on the final linking command line.
	LTO_FINAL_CFLAGS += $(filter -g%, $(KBUILD_CFLAGS))
	LTO_FINAL_CFLAGS += $(filter -m32, $(KBUILD_CFLAGS))
	LTO_FINAL_CFLAGS += $(filter -m64, $(KBUILD_CFLAGS))

	LTO_FINAL_CFLAGS += -flto=jobserver

	# Used to disable LTO for specific files (e.g. vdso)
	DISABLE_LTO := -fno-lto

	# shut up lots of warnings for the compat syscalls
	LTO_CFLAGS += $(call cc-disable-warning,attribute-alias,)

ifdef CONFIG_LTO_CP_CLONE
	LTO_CFLAGS += -fipa-cp-clone
endif

	LTO_FINAL_CFLAGS += ${LTO_CFLAGS} -fwhole-program

	KBUILD_CFLAGS += ${LTO_CFLAGS}

	LDFINAL := ${CONFIG_SHELL} ${srctree}/scripts/gcc-ld \
                  ${LTO_FINAL_CFLAGS}

	# LTO gcc creates a lot of files in TMPDIR, and with /tmp as tmpfs
	# it's easy to drive the machine OOM. Use the object directory
	# instead.
	TMPDIR ?= $(objtree)
	export TMPDIR

	# use plugin aware tools
	AR = $(CROSS_COMPILE)gcc-ar
	NM = $(CROSS_COMPILE)gcc-nm
endif # CONFIG_LTO
